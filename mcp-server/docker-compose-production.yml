version: '3.8'

services:
  # Backend API
  mcp-backend:
    image: mcp-backend:latest
    container_name: mcp-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Database Configuration
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_ENCRYPT=true
      - DB_TRUST_SERVER_CERTIFICATE=true
      
      # MCP Server Configuration
      - MCP_HOST=mcp-sql-server
      - MCP_PORT=3000
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Server Configuration
      - NODE_ENV=production
      - PORT=3001
      
      # Logging
      - LOG_LEVEL=info
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    networks:
      - mcp-network
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-backend.rule=Host(`api.mcp.local`)"
      - "traefik.http.services.mcp-backend.loadbalancer.server.port=3001"

  # Frontend Web
  mcp-frontend:
    image: mcp-frontend:latest
    container_name: mcp-frontend
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://192.168.40.197:3001
      - PORT=3003
      - HOSTNAME=0.0.0.0
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    networks:
      - mcp-network
    
    depends_on:
      - mcp-backend
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-frontend.rule=Host(`mcp.local`)"
      - "traefik.http.services.mcp-frontend.loadbalancer.server.port=3003"

  # MCP SQL Server
  mcp-sql-server:
    image: mcp-sql-server:latest
    container_name: mcp-sql-server
    restart: unless-stopped
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - MCP_HOST=0.0.0.0
      - MCP_PORT=3000
      - LOG_LEVEL=info
      - DB_ENCRYPT=true
      - DB_TRUST_SERVER_CERTIFICATE=true
    
    networks:
      - mcp-network
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  mcp-network:
    driver: bridge
    name: mcp-network

