version: '3.8'

services:
  # Servidor MCP TCP (existente)
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server
    restart: unless-stopped
    environment:
      # Database Configuration
      - DB_HOST=192.168.2.18
      - DB_PORT=1433
      - DB_NAME=PRUEBA_MCP
      - DB_USER=MCP
      - DB_PASSWORD=m_25_9e_pe1_
      
      # MCP Server Configuration
      - MCP_PORT=3000
      - MCP_HOST=0.0.0.0
      
      # Logging
      - LOG_LEVEL=info
      
      # SQL Server Options
      - DB_ENCRYPT=true
      - DB_TRUST_SERVER_CERTIFICATE=true
    
    networks:
      - mcp-network
    
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API MCP Client
  mcp-backend:
    build:
      context: ./mcp-client-backend
      dockerfile: Dockerfile
    container_name: mcp-backend
    restart: unless-stopped
    environment:
      # MCP Server Configuration
      - MCP_HOST=mcp-server
      - MCP_PORT=3000
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4
      - OPENAI_MAX_TOKENS=2000
      
      # OAuth2 Configuration
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - OAUTH_REDIRECT_URI=http://localhost:3001/api/auth/callback
      
      # Microsoft OAuth (opcional)
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      
      # Session Configuration
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      
      # Database Configuration
      - DB_HOST=192.168.2.18
      - DB_PORT=1433
      - DB_NAME=PRUEBA_MCP
      - DB_USER=MCP
      - DB_PASSWORD=m_25_9e_pe1_
      - DB_ENCRYPT=true
      - DB_TRUST_SERVER_CERTIFICATE=true
      
      # Server Configuration
      - PORT=3001
      - NODE_ENV=production
      - LOG_LEVEL=info
      
      # CORS Configuration
      - CORS_ORIGIN=http://localhost:3002
      - CORS_CREDENTIALS=true
      
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      
      # Security
      - BCRYPT_ROUNDS=12
    
    ports:
      - "3001:3001"
    
    networks:
      - mcp-network
    
    depends_on:
      mcp-server:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend Next.js MCP Client
  mcp-frontend:
    build:
      context: ./mcp-client-web
      dockerfile: Dockerfile
    container_name: mcp-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_OAUTH_PROVIDER=google
      - NODE_ENV=production
    
    ports:
      - "3002:3000"
    
    networks:
      - mcp-network
    
    depends_on:
      mcp-backend:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

networks:
  mcp-network:
    driver: bridge
    external: false

# Vol√∫menes para persistencia (opcional)
volumes:
  mcp-data:
    driver: local
